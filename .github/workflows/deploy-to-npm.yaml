name: Auto Release on Schema Change

on:
  push:
    branches: [master]
  repository_dispatch:
    types: [trigger-deployment]
  workflow_dispatch:

jobs:
  release-if-schema-changed:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important to fetch tags

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - run: yarn --frozen-lockfile

      - name: Get latest released schema
        run: |
          mkdir -p old-schema
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          git checkout $LATEST_TAG -- schema.graphql || true
          mv schema.graphql old-schema/schema.graphql || true

      - name: Generate current GraphQL schema
        run: yarn graphql:generate

      - name: Compare schema
        id: diff
        run: |
          yarn graphql-inspector diff old-schema/schema.graphql schema.graphql > schema.diff || true
          cat schema.diff
          echo "HAS_BREAKING=$(grep -q BREAKING schema.diff && echo true || echo false)" >> $GITHUB_ENV
          echo "HAS_DANGEROUS=$(grep -q DANGEROUS schema.diff && echo true || echo false)" >> $GITHUB_ENV
          echo "HAS_SAFE=$(grep -q SAFE schema.diff && echo true || echo false)" >> $GITHUB_ENV

      - name: Skip if no changes
        if: env.HAS_BREAKING == 'false' && env.HAS_DANGEROUS == 'false' && env.HAS_SAFE == 'false'
        run: |
          echo "No schema changes detected. Skipping release."
          exit 0

      - name: Bump version based on schema diff
        run: |
          if [[ "$HAS_BREAKING" == "true" ]]; then
            npm version major -m "chore(release): v%s (breaking changes)"
          elif [[ "$HAS_DANGEROUS" == "true" ]]; then
            npm version minor -m "chore(release): v%s (dangerous changes)"
          else
            npm version patch -m "chore(release): v%s (safe changes)"
          fi

      - name: Push changes and tags
        run: |
          git push
          git push --tags

      - name: Generate changelog
        run: |
          yarn conventional-changelog -p angular -i CHANGELOG.md -s

      - name: Commit changelog
        run: |
          git add CHANGELOG.md
          git commit -m "docs(changelog): update for release"
          git push

      - name: Extract version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release with Conventional Changelog
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        run: yarn publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
